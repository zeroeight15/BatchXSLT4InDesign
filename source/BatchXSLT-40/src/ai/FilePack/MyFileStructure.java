package ai.FilePack;import com.epaperarchives.batchxslt.mainXSLTFrame;import java.io.*;import java.util.*;public class MyFileStructure{ 	private String dirname = "";	private MyDir mdir = null;	String result;	ArrayList<MyFile> myfilelist = null;	public void setDirname(String dirname) {            this.dirname = dirname;	}	public String getDirname() {            return (this.dirname);	}	public String getResult() {            return result;	}	/*	* Build a hierarchy of MyDir's and MyFile's for this directory	*/	public void build() {		File f = new File(dirname);		mdir = build(f);	}		/*	* Build a hierarchy of MyDir's and MyFile's for "f"	*/	private MyDir build(File f) {                int i;                File f2;		if (!f.exists()) return null; 		if (!f.isDirectory()) return null; 				// f is an existing directory		String path = f.getPath();		String name = f.getName();		MyDir thedir = new MyDir(path, name);		// Loop thru files and directories in this path		String[] files = f.list();		for (i = 0; i < files.length; i++) {			f2 = new File(path, files[i]);			if (f2.isFile()     // either it is recognised as a file or....                                            // ... Macintosh 'Icon' files are not recognized as files!!! - add to list too!!!				|| (f2.getName().toUpperCase().startsWith("ICO") && ((f2.getName().length() == 5) || (f2.getName().length() == 4))				&& (f2.getName().endsWith("\r") || f2.getName().endsWith("?")))				) {				thedir.addFile(new MyFile(path, files[i]));			}			else if (f2.isDirectory()) {				File f3 = new File(path, files[i]);				MyDir m = build(f3); // recursive call				if (m != null) { thedir.addDir(m); }				}		}		return thedir;	}		/*	* Display the name of the file on System.out	 	*/	protected void outFile(MyFile f, int level) {		String name = f.getName();		result += repeat(" ",2*level) + "File: " + name + "\n";	}			/*	* Display the name of the directory on System.out	*/	protected void outDir(MyDir d, int level) {		String name = d.getName();		result += repeat(" ",2*level) + "Dir: " + name + "\n";	}			/*	* Close display of the directory 	*/	protected void outEndDir() {	}			public void list() {		if (mdir == null) {			System.out.println("Not a valid directory");			return;		}		result = "";		outDir(mdir, 0);		list(mdir, 0);		outEndDir();	}		private void list(MyDir m, int level) {		level++;		ArrayList md = m.getDirs();		for (int i = 0; i < md.size(); i++) {			MyDir d = (MyDir)md.get(i);			outDir(d, level);			list(d, level); // recursive call			outEndDir();		}			ArrayList mf = m.getFiles();		for (int i = 0; i < mf.size(); i++) {			MyFile f = (MyFile)mf.get(i);			outFile(f,level); 		}		}			/*	* Utility: return "n" times "c"	*/	private String repeat(String c, int n) {		StringBuilder s = new StringBuilder(n);		for (int i = 0; i < n; i++) {			s.append(c);		}		return s.toString();	}			public void build_file_list() {		if (mdir == null) return;		if (myfilelist == null) myfilelist = new ArrayList<MyFile>();		else myfilelist.clear();		build_file_list(mdir, 0);	}	private void build_file_list(MyDir m, int level) {		level++;		// first get all files		ArrayList<MyFile> mf = m.getFiles();		for (int i = 0; i < mf.size(); i++) { 			if (mainXSLTFrame.general_abort == true) { myfilelist = null; return; }			myfilelist.add(mf.get(i));		}			// then get all dirs		ArrayList md = m.getDirs();		for (int i = 0; i < md.size(); i++) { 			if (mainXSLTFrame.general_abort == true) { myfilelist = null; return; }			MyDir d = (MyDir)md.get(i);			MyFile f = new MyFile(d.getPath(),d.getName(),2);	// add file name entry as dir			myfilelist.add(f);			build_file_list(d, level); // recursive call		}		}		public void insertFile(String path, String name, int idx) {		MyFile f = new MyFile(path,name,1);	// add file name entry as file		myfilelist.add(idx, f);	}		public int file_list_size() {		if (mdir == null) return(0);		if (myfilelist == null) return(0);		if (myfilelist.size() <= 0) return(0);		return(myfilelist.size());	}	public boolean is_locked_folder(int idx)	{		if (myfilelist == null) return(false);		if (idx >= myfilelist.size()) return (false);		MyFile f = (MyFile)myfilelist.get(idx);		return(f.is_locked_folder());	}	public boolean is_empty_folder(int idx)	{		if (myfilelist == null) return(false);		if (idx >= myfilelist.size()) return (false);		MyFile f = (MyFile)myfilelist.get(idx);		if (f.getType() != 2) return (false);	// is not a dir		if (idx == (myfilelist.size() - 1)) return (true);		// check if we have more files or dirs in thgis dir		MyFile f2 = (MyFile)myfilelist.get(idx+1);		// if we have files in this dir - they have exactly the same path like this dir - means: dir is NOT empty		if ((f.getType() == 1) && (f.getPath().equals(f2.getPath()) == true)) return (false);			// if we have dir in this dir - the path of f is fully contained in the path of f2 - means: dir is NOT empty		if ((f.getType() == 2) && (f2.getPath().startsWith(f.getPath()) == true)) return (false);			return(true);	}	public int get_file_type(int idx)	{		if (myfilelist == null) return(-1);		if (idx >= myfilelist.size()) return (-1);		MyFile f = (MyFile)myfilelist.get(idx);		return(f.getType());	}	public String get_file_path(int idx)	{		if (myfilelist == null) return("");		if (idx >= myfilelist.size()) return ("");		MyFile f = (MyFile)myfilelist.get(idx);		return(f.getPath());	}		public String get_file_name(int idx)	{		if (myfilelist == null) return("");		if (idx >= myfilelist.size()) return ("");		MyFile f = (MyFile)myfilelist.get(idx);		return(f.getName());	}	public boolean is_folder_empty(String dirpath, boolean delete_it)	{		boolean retflag;		int retry_cnt;		int	pos;		File mytmpFile;		String	flist[];		String root_path = "";		if (dirpath == null) return(false);		if (dirpath.equals("")) return(false);		if (delete_it) {	// immediately delete this empty dir up to the rootpath			root_path = getDirname();			if (root_path.endsWith(File.separator)) root_path = root_path.substring(0,root_path.length()-1);		}		mytmpFile = new File(dirpath);		if (mytmpFile.isDirectory() == true) {			flist = mytmpFile.list();			if (flist.length > 0) return(false);	// not empty dir			if (delete_it) {	// immediately delete this empty dir up to the rootpath				if (dirpath.startsWith(root_path) == false) return(true);	// security: other path!				// delete if empty dir and not root path				String my_dirpath = dirpath;				if (my_dirpath.endsWith(File.separator)) my_dirpath = my_dirpath.substring(0,my_dirpath.length()-1);				if (root_path.equals(my_dirpath) == true)  return(true);				// ok let's try to delete it				for (retry_cnt = 0; retry_cnt < 5; retry_cnt++ ) {					retflag = mytmpFile.delete();					if (retflag == true) break;		// ok - deleted				}				// delete empty dir up to the root				while (root_path.equals("") == false) {					// cut the last folderpart from path					if ((pos = my_dirpath.lastIndexOf(File.separator)) > -1) {						my_dirpath = my_dirpath.substring(0,pos);					}					else break;					// and delete folder if empty					if (root_path.equals(my_dirpath) == false) {						mytmpFile = new File(my_dirpath);						if (mytmpFile.isDirectory() == true) {							// ok let's try to delete it							for (retry_cnt = 0; retry_cnt < 5; retry_cnt++ ) {								retflag = mytmpFile.delete();								if (retflag == true) break;		// ok - deleted							}						}						else break;					}					else break;				}			}				return(true);	// is empty		}		return(false);	}}